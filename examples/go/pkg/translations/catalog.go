// Code generated by running "go generate" in golang.org/x/text. DO NOT EDIT.

package translations

import (
	"golang.org/x/text/language"
	"golang.org/x/text/message"
	"golang.org/x/text/message/catalog"
)

type dictionary struct {
	index []uint32
	data  string
}

func (d *dictionary) Lookup(key string) (data string, ok bool) {
	p, ok := messageKeyToIndex[key]
	if !ok {
		return "", false
	}
	start, end := d.index[p], d.index[p+1]
	if start == end {
		return "", false
	}
	return d.data[start:end], true
}

func init() {
	dict := map[string]catalog.Dictionary{
		"de_DE": &dictionary{index: de_DEIndex, data: de_DEData},
		"en_GB": &dictionary{index: en_GBIndex, data: en_GBData},
		"lv_LV": &dictionary{index: lv_LVIndex, data: lv_LVData},
		"ru_RU": &dictionary{index: ru_RUIndex, data: ru_RUData},
	}
	fallback := language.MustParse("en-GB")
	cat, err := catalog.NewFromMap(dict, catalog.Fallback(fallback))
	if err != nil {
		panic(err)
	}
	message.DefaultCatalog = cat
}

var messageKeyToIndex = map[string]int{
	"%[1]s is a city of %[2]s!\n":             4,
	"%d files remaining!\n":                   5,
	"Congrats! You are in %s\n":               3,
	"Hello\n":                                 0,
	"User has been registered successfully\n": 2,
	"World\n": 1,
}

var de_DEIndex = []uint32{ // 7 elements
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000,
} // Size: 52 bytes

const de_DEData string = ""

var en_GBIndex = []uint32{ // 7 elements
	0x00000000, 0x0000000b, 0x00000016, 0x00000041,
	0x00000061, 0x00000080, 0x0000009c,
} // Size: 52 bytes

const en_GBData string = "" + // Size: 156 bytes
	"\x04\x00\x01\x0a\x06\x02Hello\x04\x00\x01\x0a\x06\x02World\x04\x00\x01" +
	"\x0a&\x02User has been registered successfully\x04\x00\x01\x0a\x1b\x02Co" +
	"ngrats! You are in %[1]s\x04\x00\x01\x0a\x1a\x02%[1]s is a city of %[2]s" +
	"!\x04\x00\x01\x0a\x17\x02%[1]d files remaining!"

var lv_LVIndex = []uint32{ // 7 elements
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000,
} // Size: 52 bytes

const lv_LVData string = ""

var ru_RUIndex = []uint32{ // 7 elements
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000,
} // Size: 52 bytes

const ru_RUData string = ""

// Total table size 364 bytes (0KiB); checksum: 24F8BE12
